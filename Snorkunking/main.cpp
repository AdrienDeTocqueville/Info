#include <string>
#include <iostream>
#include <SFML/Graphics.hpp>
#include "Random.h"
#include "Input.h"

#include "Snorkunking.h"
#include "Player.h"

#include "NEAT/Pool.h"

//#define REBUILD

using namespace std;

float fitnessEvaluation(Network* net, bool& stop);

Network* best = nullptr;

int main()
{
    sf::RenderWindow ecran(sf::VideoMode(350, 650), "My window");
    Input::init(&ecran);
    Random::init();

    Pool pool(300, 18, 3);

    #ifdef DEBUG
//        std::string bestADN = "31 23 71 0 2 0 0 0 0 12 14 0.390225 1 1 1 14 1.65145 1750 0 3 12 0.89172 1751 1 11 14 0.226766 1752 0 1 15 1.58202 1753 1 15 14 0.125553 1754 1 15 15 0.156242 2506 1 3 13 -0.514091 2507 1 15 16 -0.781256 2508 0 16 14 -2.07982 2509 1 9 14 0.106781 4776 1 13 12 1.22191 4777 0 11 12 -0.22497 4778 1 16 17 -0.726035 4779 1 17 14 -1.91835 4780 1 6 13 -1.1933 6318 1 17 15 -1.37971 6319 1 10 17 -0.472568 7109 1 3 16 0.787627 7110 1 11 16 -1.34822 7111 1 3 18 1.03134 7112 1 18 12 -0.678912 7113 1 6 17 -1.66088 7876 1 4 17 -0.877842 7877 1 10 18 -1.02943 8660 1 1 13 -0.485232 8661 1 11 19 0.90131 8662 1 19 14 0.0244896 8663 1 15 13 -0.0840286 9433 1 7 18 -0.150012 9434 1 11 18 -0.774253 9435 1 11 21 1.20249 9436 1 21 19 1.21198 9437 1 7 19 0.910367 10186 1 4 18 0.291172 10187 1 18 13 -0.574705 10978 1 8 12 0.781141 10979 1 14 12 -0.888098 11732 1 0 17 -1.3427 11733 1 16 12 1.89275 12474 1 0 13 -0.139592 13249 1 15 18 0.550756 13250 1 16 13 1.15248 14069 1 4 13 0.783119 14070 1 15 19 0.912938 14805 1 4 24 1.01164 14806 1 24 18 0.238393 14807 0 7 17 0.21933 15579 0 9 15 -1.64237 15580 1 18 25 0.892696 15581 1 25 13 -0.524472 15582 1 2 17 -1.01645 17803 1 25 17 1.8872 17804 1 11 25 -1.02475 17805 1 14 26 0.992332 17806 1 26 12 1.86442 17807 1 26 24 -1.88745 18617 1 26 15 0.77569 19370 1 2 21 0.0118605 19371 1 5 25 1.56963 19372 1 24 17 0.336619 20955 1 1 21 -0.120914 20956 1 8 19 -1.25779 20957 1 19 12 0.71395 21713 1 0 15 1.43223 21714 1 9 19 1.27158 21715 1 24 29 1 21716 1 29 18 0.238393 21717 1 29 24 1.74279 22448 1 13 30 1 22449 1 30 12 1.22191 22450 1";
//        std::string bestADN = "34 25 61 0 1 0 0 0 0 7 14 0.150568 45 1 6 16 -0.13361 46 1 6 17 0.924764 47 0 17 16 1.0554 48 1 16 16 -1.28648 6030 1 3 16 1.55808 6031 1 7 18 0.733137 6032 1 18 14 0.0535337 6033 1 10 18 1.60485 6850 1 13 16 0.141185 6851 1 2 14 2.10712 8422 1 10 21 1.74767 8423 0 21 18 -0.678664 8424 1 14 16 -0.874861 9178 1 0 21 -0.637538 9179 1 13 18 -0.569162 9180 1 13 22 1.04106 9181 1 22 16 0.0790053 9182 1 5 22 0.487503 9903 1 16 22 -1.25774 9904 1 12 15 0.140934 10649 1 13 17 -1.04181 10650 1 4 17 0.278287 12145 1 1 18 -0.360241 12146 0 13 21 -0.168318 12147 1 10 14 -0.285326 12934 1 11 18 1.10934 12935 1 21 25 0.956461 12936 1 25 18 -0.592017 12937 1 18 22 -1.13201 13714 1 3 26 1 13715 1 26 16 1.47533 13716 1 15 14 -1.689 14456 0 15 27 1.04125 14457 1 27 14 -1.73801 14458 0 3 21 0.0761326 15247 1 13 28 1 15248 1 28 21 0.312066 15249 1 9 22 1.94696 15973 1 2 29 1.12362 15974 1 29 14 2.20579 15975 1 29 18 -1.6162 17615 1 13 27 -1.48456 17616 1 21 30 1.05046 17617 1 30 18 -0.829533 17618 1 5 30 -0.0295032 18381 1 17 17 -0.992096 18382 1 13 14 -0.679207 18383 1 6 31 1.05431 18384 1 31 16 -1.19834 18385 1 13 32 1 19120 1 32 28 0.848423 19121 1 32 14 -0.0665914 19875 1 13 31 -1.86328 19876 1 30 16 0.860561 20589 1 2 30 0.255684 20590 1 13 33 1 20591 1 33 21 0.320335 20592 1 32 26 1.40733 21388 1 8 18 -0.283029 22131 1 5 25 0.424512 22926 0";
//        std::string bestADN = "39 26 229 0 2 0 0 0 0 12 14 -0.677314 53 0 7 15 -1.39568 54 1 13 14 -1.41244 55 1 16 14 -1.10022 1919 1 9 16 0.37175 1920 1 2 14 2.15992 2746 1 10 16 0.873249 2747 1 1 14 -0.484956 3637 1 2 17 1.01712 3638 1 17 14 0.78584 3639 1 14 14 -0.592079 4455 1 13 16 1.8531 4456 1 17 18 1.167 4457 1 18 14 1.92313 4458 1 16 16 1.88744 5323 1 13 15 -1.67983 5324 0 10 19 0.705161 5325 1 19 16 -1.30188 5326 1 15 19 1.35142 6083 1 8 18 1.23409 6084 1 19 20 1.17365 6085 1 20 16 0.669759 6086 1 0 20 0.224555 6924 1 12 21 -0.464187 6925 1 21 14 1.71777 6926 1 13 19 2.01367 7675 1 20 15 0.947116 7676 1 19 22 0.972372 7677 1 22 20 1.72348 7678 1 9 18 0.324488 9288 1 4 16 1.70436 9289 1 12 23 1.64135 9290 1 23 21 1.11902 9291 1 20 14 0.398388 9970 1 3 17 0.60054 9971 1 13 20 0.109285 9972 1 10 15 -1.69543 10708 1 18 16 -1.86766 10709 1 8 23 -0.841074 11488 1 14 20 0.800762 11489 1 1 25 1.23129 11490 1 25 14 -0.690951 11491 1 0 21 1.42411 12980 1 8 20 -0.19804 12981 1 23 27 1.04953 12982 1 27 21 1.24314 12983 1 8 27 -0.212417 13762 1 14 21 -0.12299 13763 1 22 18 -0.267321 13764 1 17 27 -0.455616 14502 1 22 23 0.825591 14503 1 13 22 -0.225902 14504 1 13 28 -0.493575 14505 1 28 14 -1.42889 14506 1 28 28 1.36575 15292 1 5 16 1.65624 15293 1 19 29 -0.836529 15294 1 29 16 -1.27943 15295 1 3 15 -1.57021 16016 1 15 25 0.307524 16017 1 10 30 0.993254 16018 1 30 19 0.937665 16019 1 28 18 -1.63565 16820 1 8 28 -0.450488 16821 1 22 31 1.00022 16822 1 31 18 -0.328364 16823 1 28 22 -0.563458 17619 1 13 23 -0.255603 17620 1 13 25 0.161273 17621 1 15 15 -0.3343 18400 1 19 28 -1.69916 18401 1 28 32 -1.73715 18402 1 32 28 -1.44486 18403 1 18 22 0.19745 19169 1 9 30 1.55785 19170 1 11 19 1.86359 19171 1 10 33 1.02961 19172 1 33 15 -0.679403 19173 1 23 22 -1.81552 19900 1 29 31 1.58108 19901 1 8 34 1.02859 19902 1 34 20 -0.0326808 19903 1 8 21 1.45848 20626 1 21 32 -1.61003 20627 1 12 16 0.263744 20628 1 34 28 1.75637 21440 1 7 30 -0.185842 21441 1 21 25 1.86554 21442 1 18 27 -1.0582 22157 1 21 33 -1.20688 22158 1 27 35 1 22159 1 35 21 1.27856 22160 1 27 19 0.566363 22978 1 13 18 0.657186 22979 0 13 37 1 22980 1 37 18 0.657186 22981 1 15 23 1.87451 23788 1 2 28 -1.51488 23789 1 13 32 -1.61486 23790 1 17 19 -0.553545 24427 1 0 35 1.31077 24428 1 29 20 -1.68468 24739 1 9 37 -0.704672 24740 1 34 29 0.807947 25014 1 17 21 -1.4011 25015 1 10 17 -0.298288 25411 1 14 23 -0.882778 25412 1 17 29 -1.58226 25773 1 8 25 0.240669 26096 1 21 31 1.99463 26898 1 30 29 0.983856 27205 1 33 18 0.418043 27641 1 22 37 0.592364 27642 1 9 25 -1.02939 28066 1 6 18 1.88672 28067 1 3 21 1.02243 28354 1 8 19 1.55333 28632 1 35 34 -0.942717 28633 1 23 32 0.256661 29132 1 23 16 -0.10126 29474 1 7 23 0.660726 29475 1 5 31 -0.711631 29829 1 18 34 0.912931 30264 1 19 25 1.45628 30265 1 14 19 -1.21445 30266 1 35 25 -0.725669 30582 1 29 29 1.91748 30583 1 15 22 -0.981903 30964 1 20 35 -1.65233 31394 1 33 28 -1.79028 31395 1 30 17 0.971038 31396 1 37 28 1.33494 31752 1 23 35 -1.18735 31753 1 18 30 1.41026 32131 1 5 33 -0.682089 32132 1 34 30 0.376049 32449 1 18 18 -1.85473 32450 1 3 30 0.35493 32451 1 6 28 -1.79894 32816 1 5 18 1.88537 32817 1 11 37 1.85961 33178 1 0 28 -0.817835 33588 1 22 25 -0.86935 33589 1 15 31 0.013123 34051 1 21 27 -1.42174 34052 1 33 21 -0.977142 34369 1 25 31 1.64183 34370 1 4 17 0.00628681 34793 1 6 31 -0.862148 34794 1 29 15 -0.992157 34795 1 31 15 1.92175 35329 1 16 19 1.60594 35330 1 17 32 -1.53648 35331 1 18 28 1.8131 35737 1 2 27 1.70592 35738 1 21 23 1.92431 36058 1 25 28 1.96142 36059 1 15 35 0.335887 36060 1 13 27 -1.12387 36516 1 5 22 0.307688 36962 1 16 29 0.981658 36963 1 27 16 -0.56856 37457 1 33 23 0.724448 37458 1 10 31 -1.59044 37459 1 12 25 1.32542 37793 1 22 32 -0.140934 37794 1 7 20 1.76183 37795 1 31 23 0.028016 38138 1 12 18 1.72008 38563 1 28 23 0.66744 38973 1 12 15 0.526566 38974 1 35 31 -0.224433 39289 1 27 17 -0.839808 39621 1 14 22 1.59508 39622 1 2 37 0.49556 40144 1 0 31 -1.62426 40145 1 30 23 -1.18601 40146 1 34 32 -1.08774 40331 1 28 17 0.117985 40332 1 15 30 -1.43541 40333 1 25 17 -1.77685 40645 1 8 29 0.760704 40646 1 30 20 -1.12986 41024 1 12 17 0.828211 41025 1 7 33 1.0007 41609 1 12 30 -1.28538 41610 1 30 33 -1.04184 41611 1 11 15 0.457839 41851 1 28 20 0.0398572 41852 1 12 19 1.8197 42320 1 25 29 -1.20103 42576 1 30 18 0.967009 42577 1 17 22 -1.00876 42578 1 8 15 -1.54784 42989 1 27 34 -0.179754 43259 1 12 31 -1.45006 43260 1 25 15 -1.20554 43261 1 31 16 1.9386 43484 1 21 37 0.171941 43485 1 29 32 1.59789 43897 1 4 30 -1.76342 43898 1 3 23 1.0184 44586 1 27 25 0.241401 44697 1 33 32 -1.22532 45254 1 16 35 0.129337 45255 1 18 33 -1.635 45550 1 22 35 -0.813562 45551 1 28 37 -0.0634175 45552 1 29 37 1.66918 45827 1 11 29 0.273263 46327 1 5 23 0.214911 46486 1 7 29 -1.95825 47089 1 31 35 0.930876 47090 1 2 19 -1.01559 47091 1 14 17 1.96789 47207 1 27 27 1.89856 47208 1 34 35 -0.292184 47209 1 4 35 -0.351634 47602 1 33 16 1.75951 47603 1 11 30 1.40904 47604 1 18 32 -1.44542 48190 1 10 29 1.18125 48191 1 29 14 -0.172063 48192 1 21 35 -1.84497 48330 1 32 37 -0.535356 48839 1 37 35 -1.0018 48940 1 11 25 -0.860805 48941 1 17 33 -0.962249 49478 1 22 34 0.759972 49795 1";
//        std::string bestADN = "45 25 94 0 1 0 0 0 0 2 15 0.324043 97 1 14 16 1.01403 98 1 2 17 1.8755 99 1 17 186530104 -0.428053 100 1 6 16 0.502746 2849 1 9 17 1.68322 2850 1 13 186530104 1.34348 2851 1 16 16 0.797327 3688 1 2 16 -1.45431 3689 1 1 15 -1.81216 4485 1 0 186530104 -0.894253 4486 1 16 186530104 -1.13515 5227 0 8 16 0.0544963 5228 1 13 15 0.0904454 5229 1 16 18 1.0399 5230 1 18 16 1.49788 5231 1 0 15 -1.85736 6825 1 15 17 1.21743 6826 1 13 18 1.96945 6827 1 13 19 0.90977 6828 1 19 18 1.79322 6829 1 4 18 -1.76142 7615 1 186530104 186530104 -0.849793 7616 1 4 20 1.09294 7617 1 20 18 -1.69674 7618 1 13 17 1.41068 9169 1 10 20 -1.78031 9170 1 20 186530104 0.0786255 9856 1 16 21 0.808052 9857 1 21 18 0.929768 9858 1 20 19 1.39288 10588 0 12 18 -0.659595 10589 1 10 17 -0.308854 11303 1 7 19 1.25056 11304 1 14 18 -0.504821 12028 1 11 15 -0.0276051 12029 1 13 14 0.972632 12030 1 3 17 -0.414576 13210 1 19 186530104 -0.185424 13211 1 1 186530104 -2.03105 13978 1 20 26 -0.292893 13979 1 26 19 1.45325 13980 1 8 15 1.20605 15422 1 10 27 1.04819 15423 1 27 17 -0.223606 15424 1 17 20 -1.79031 16191 1 0 29 1.02979 16192 1 29 186530104 1.51071 16193 1 8 27 -1.98492 18464 1 13 26 -0.126706 18465 1 13 30 1 18466 1 30 15 1.36089 18467 1 20 29 -1.34039 19205 1 29 31 0.96999 19206 1 31 186530104 -0.181289 19207 1 17 29 -1.34264 19959 1 30 32 1 19960 1 32 15 1.20331 19961 1 15 32 -0.0757469 20681 1 13 27 -1.36519 20682 1 21 33 0.972245 20683 1 33 18 0.960063 20684 1 15 27 1.78295 22171 1 21 27 0.537309 22172 1 19 30 1.55858 22894 1 0 34 1 22895 1 34 186530104 -0.0128305 22896 1 29 19 1.18479 23583 1 7 186530104 0.721519 23584 1 13 34 -1.9198 23585 1 26 14 -0.0985748 24220 1 30 37 1 24221 0 37 15 1.36631 24222 1 8 20 -0.801355 25131 1 1 17 1.46776 25132 1 2 38 1 25133 1 38 17 1.8755 25134 1 26 33 -1.82348 25886 1 1 18 1.04819 25887 1 13 33 1.55712 25888 1 37 31 -0.889492 27330 1 20 39 1 27331 1 39 18 -1.72136 27332 1 10 19 0.888028 28214 1 4 29 -0.284371 28215 1 8 39 1.50169 28930 1 2 30 -0.932585 28931 1 30 41 1 28932 1 41 37 1 28933 1 30 19 1.17685 29819 1 26 41 0.98764 30586 1 38 29 -0.939177 30587 1 186530104 44 1 30588 1 44 186530104 -0.849793 30589 1";
//        std::string bestADN = "49 25 115 0 1 0 0 0 0 21 20 -1.76428 73 1 17 20 -0.372827 74 1 17 22 1.57051 75 1 22 20 -0.718823 76 1 18 19 0.232947 1167 1 2 19 2.34163 1168 1 18 20 -1.59558 1169 1 19 21 1.87826 2008 1 12 22 -1.42798 2009 1 10 22 1.14625 2854 1 22 21 0.927554 2855 1 15 19 0.568701 3706 1 1 21 0.585876 3707 1 22 24 1.57554 3708 1 24 21 1.19468 3709 1 15 22 1.32037 4538 1 24 22 -0.834558 4539 1 18 21 1.25122 4540 1 22 25 0.434542 4541 1 25 20 -1.20494 4542 1 15 25 -0.380035 5321 1 9 21 0.593475 5322 1 18 24 -0.727436 5323 1 11 20 -1.9143 6172 1 12 21 -0.291442 6958 1 11 24 -1.87019 6959 1 12 25 -0.318341 7682 1 13 22 -0.200814 7683 1 0 21 0.848629 8391 1 14 21 2.02386 8392 1 24 25 -1.90613 13396 1 21 19 0.166473 13397 1 18 25 -1.97876 13398 1 9 28 -1.14465 13399 1 28 21 1.48429 13400 1 3 25 0.955901 14199 1 8 24 -0.631769 14200 1 6 24 1.38571 14201 1 3 20 1.78271 14985 1 5 22 -1.44953 14986 1 3 24 -0.246587 14987 1 12 29 1.07397 14988 1 29 25 -0.0204142 14989 1 15 28 0.500071 15841 1 17 28 0.450996 16582 1 3 30 1.02879 16583 1 30 20 -2.07406 16584 1 29 24 0.933925 17338 1 11 32 1.03194 17339 1 32 20 0.548707 17340 1 25 24 0.407817 18103 1 1 25 0.736256 18104 1 3 19 0.946694 18877 1 6 30 -0.513153 18878 1 4 22 0.47775 19644 1 15 29 1.31011 19645 1 1 22 -2.01384 19646 1 12 34 1.51976 19647 1 34 21 1.15931 19648 1 29 21 0.699549 20471 1 7 32 2.07261 20472 1 18 32 0.324897 20473 1 18 35 0.983041 20474 1 35 20 -1.78968 20475 1 21 22 -1.71099 21306 1 35 36 1.13369 21307 1 36 20 -1.88528 21308 1 2 22 -1.65978 22297 1 14 19 0.27273 22298 1 6 19 -0.752333 22299 1 17 37 1.01723 22300 1 37 28 -1.02937 22301 1 12 20 -1.48106 23181 1 17 35 0.626464 23182 1 13 25 -0.151738 24003 1 0 37 0.499969 24004 1 11 34 0.22355 24727 1 18 39 1.09325 24728 1 39 24 -0.552163 24729 1 32 29 1.86399 25546 1 1 36 0.914669 25547 1 22 40 0.958213 25548 1 40 24 1.48606 25549 1 28 25 -1.06161 26476 1 0 40 1.59688 26477 1 18 40 -0.68311 26478 1 30 41 1.01539 26479 1 41 20 -1.81744 26480 1 37 24 -1.37992 27231 1 28 29 0.445831 27232 1 2 42 1.04841 27233 1 42 22 -1.62624 27234 1 3 22 0.429126 28136 0 40 30 -1.84393 28137 0 18 28 -1.61204 28138 1 12 43 1.27866 28139 1 43 34 1.41196 28140 1 22 34 0.139633 28889 1 41 28 -1.00775 28890 0 7 25 -0.577837 29800 1 18 29 0.495804 29801 1 3 45 1 29802 1 45 22 0.429126 29803 1 45 32 1.5294 30526 1 6 29 0.0311899 30527 1 28 46 1 30528 1 46 21 1.56418 30529 1 19 46 0.289499 31488 1 11 37 0.0153203 31489 1 40 47 1 31490 1 47 30 -1.84393 31491 1 40 32 -1.29453 32175 1 46 43 -1.48412 32176 1 41 48 1 32177 1 48 28 -1.00775 32178 1";
//        std::string bestADN = "45 30 104 0 4 0 0 0 0 13 21 -1.46394 37 1 16 20 0.467131 38 0 18 19 -0.471796 39 1 11 20 -2.07471 1107 1 3 21 1.36019 1108 1 18 20 -0.152138 1109 1 7 21 -1.98412 1896 0 6 20 -1.55843 1897 1 19 19 0.898255 5969 0 4 20 0.705997 5970 1 2 21 0.403046 8208 1 7 20 -1.39913 8209 1 9 19 1.25274 9014 1 3 25 1.07813 9015 1 25 21 0.668369 9016 1 19 20 -0.642625 9760 1 9 25 -0.816218 9761 1 3 26 1.95886 9762 1 26 21 1.48746 9763 1 13 26 1.73066 10491 1 1 19 -0.440536 10492 0 21 21 0.519086 11232 0 2 19 1.75268 11233 1 14 26 -1.84221 11234 0 11 27 0.912596 11235 1 27 20 -1.74755 11236 1 12 25 1.2492 11922 1 1 25 1.94952 11923 1 7 25 1.24806 13372 1 1 20 2.05491 13373 0 18 21 -0.0596332 13374 1 1 30 1.13412 13375 1 30 19 -0.399531 13376 1 4 30 -1.8036 14132 0 5 21 1.81548 14133 1 10 20 -1.21833 14134 1 8 19 0.652256 14878 1 14 19 -1.07616 14879 1 6 25 1.50074 14880 1 16 32 0.964006 14881 1 32 20 0.319303 14882 1 2 30 -1.58622 15604 1 4 33 -0.215033 15605 1 33 30 -1.49843 15606 1 27 19 -0.570618 16354 1 33 19 0.943961 16355 1 7 30 -0.396415 17937 1 2 20 -1.30839 17938 1 18 27 -0.626667 17939 1 21 34 0.540094 17940 1 34 21 0.381566 17941 1 26 26 1.91962 18707 1 26 32 0.93318 18708 1 14 27 0.427686 19491 1 19 27 1.4438 19492 1 17 34 -0.59337 19493 1 34 34 -0.650227 20226 1 15 27 -0.808713 20227 1 3 27 -0.520346 20228 1 18 34 1.2711 20229 1 19 35 1.0473 20230 1 35 19 0.95751 20231 1 9 34 -0.226139 20959 1 18 32 -0.30805 20960 1 8 27 -0.181219 20961 1 34 36 0.934629 20962 1 36 21 0.552196 20963 1 12 35 -0.551714 21777 1 18 25 1.55834 21778 0 7 37 0.972892 21779 1 37 21 -1.98286 21780 1 14 30 -0.46736 23405 1 0 25 0.147526 23406 1 32 19 -0.247488 23407 1 18 37 0.107974 23408 1 18 38 1.02602 23409 1 38 25 1.16379 23410 1 19 34 0.809656 25686 1 8 35 0.364452 25687 1 20 37 -0.714539 25688 1 2 39 1 25689 1 39 20 -1.38499 25690 1 12 20 1.76702 27291 1 26 36 1.81473 27292 1 35 37 1.01092 27293 0 36 20 -1.08786 28136 1 37 30 -1.66503 28137 0 8 20 -0.084048 28138 1 35 40 1 28139 1 40 37 1.01092 28140 1 13 33 -1.01291 29035 1 15 36 1.77966 29036 1 11 37 -0.57796 29814 1 0 33 -0.794885 29815 1 39 40 0.364086 29816 1 11 38 -1.33396 29817 1 1 43 1 29818 1 43 30 1.03879 29819 1 19 25 -1.63549 30650 1 32 30 -0.896817 30651 1 25 39 1.94494 30652 1 18 43 1.83422 30653 1 37 44 1 30654 1 44 30 -1.66503 30655 1";
        std::string bestADN = "46 23 236 0 2 0 0 0 0 13 21 -1.58291 37 1 16 20 0.467131 38 0 18 19 -0.471796 39 1 11 20 -1.96314 1107 1 3 21 1.23134 1108 1 18 20 -0.15304 1109 1 7 21 -1.98412 1896 0 6 20 -1.62969 1897 1 19 19 0.898255 5969 0 4 20 0.617162 5970 1 2 21 0.403046 8208 1 7 20 -1.38006 8209 1 9 19 1.29044 9014 1 3 25 0.90481 9015 1 25 21 0.668369 9016 1 19 20 -0.574094 9760 1 9 25 -0.816218 9761 1 3 26 0.848964 9762 1 26 21 1.39732 9763 1 13 26 1.73066 10491 1 1 19 -0.440536 10492 0 21 21 0.519086 11232 0 2 19 1.75268 11233 1 14 26 -1.84221 11234 0 11 27 0.912596 11235 1 27 20 -1.70637 11236 1 12 25 1.2492 11922 1 1 25 1.94952 11923 1 7 25 1.24806 13372 1 1 20 2.05491 13373 0 18 21 0.374583 13374 1 1 30 1.17852 13375 1 30 19 0.245796 13376 1 4 30 -1.79746 14132 1 5 21 1.70508 14133 1 10 20 -1.17583 14134 1 8 19 0.624093 14878 1 14 19 -1.11609 14879 1 6 25 1.50074 14880 1 16 32 0.932714 14881 1 32 20 0.400862 14882 1 2 30 -1.58256 15604 1 4 33 -0.217472 15605 1 33 30 -1.53811 15606 1 27 19 -0.581521 16354 1 33 19 0.943961 16355 1 7 30 1.25877 17937 1 2 20 -1.30839 17938 1 18 27 -0.626667 17939 1 21 34 0.540094 17940 1 34 21 0.381566 17941 1 26 26 2.13392 18707 1 26 32 1.09902 18708 1 14 27 1.6776 19491 1 19 27 1.40837 19492 1 17 34 -0.399709 19493 1 34 34 -0.650227 20226 1 15 27 -0.804529 20227 1 3 27 -0.349546 20228 1 18 34 1.34147 20229 1 19 35 1.1243 20230 1 35 19 0.95751 20231 1 9 34 -0.145069 20959 1 18 32 -0.275216 20960 1 8 27 -0.239875 20961 1 34 36 1.01758 20962 1 36 21 0.447155 20963 1 12 35 -0.586009 21777 1 18 25 1.55834 21778 0 7 37 1 21779 1 37 21 -1.98286 21780 1 14 30 -0.46736 23405 1 0 25 0.227315 23406 1 32 19 -0.154095 23407 1 18 37 0.19882 23408 1 18 38 1.05371 23409 1 38 25 1.16379 23410 1 19 34 0.809656 25686 1 8 35 0.364452 25687 1 20 37 -0.616879 25688 1 2 39 1 25689 1 39 20 -1.30671 25690 1 12 20 1.76702 27291 1 26 36 1.81473 27292 1 35 37 1.01092 27293 0 36 20 -1.08786 28136 1 37 30 -1.5827 28137 1 8 20 -0.084048 28138 1 35 40 1.09432 28139 1 40 37 1.01092 28140 1 13 33 -1.01291 29035 1 15 36 1.77966 29036 1 11 37 -0.57796 29814 1 0 33 -0.794885 29815 1 39 40 0.364086 29816 1 11 38 -1.33396 29817 1 1 43 1 29818 1 43 30 1.99805 29819 1 19 25 -1.63549 30650 1 32 30 -0.896817 30651 1 25 39 1.94494 30652 1 18 43 1.83422 30653 1 37 44 1 30654 1 44 30 -1.66503 30655 1 16 21 -0.773156 31438 1 4 27 -0.270699 31439 1 14 33 1.81384 31440 1 15 44 -0.461135 32286 1 43 25 -0.674764 32287 1 10 27 0.378613 32288 1 16 19 1.32066 32289 1 17 26 0.856777 32554 1 36 44 1.28526 32555 1 27 33 1.45775 32556 1 1 37 1.10361 32557 1 32 43 -0.995086 32930 1 9 43 -0.483108 32931 1 25 32 1.4514 32932 1 33 43 -0.520218 33174 1 7 40 -0.727866 33175 1 17 20 1.17344 33574 1 38 20 -1.66735 33575 1 16 43 -0.881558 33576 1 26 27 0.950285 33888 1 44 40 0.280953 33889 1 37 20 -0.869106 33890 1 19 43 0.011536 33891 1 40 25 -1.69396 34331 1 12 36 -0.395825 34684 1 19 21 -1.223 34685 1 36 39 -0.170843 34686 1 27 32 -0.989959 34687 1 14 40 -0.549883 34909 1 30 37 1.07089 34910 1 15 25 1.30784 35294 1 1 39 0.603107 35295 1 0 27 0.10773 35296 1 43 34 1.12107 35699 1 5 19 -1.5454 35700 1 1 27 -0.624714 36039 1 14 21 0.777795 36040 1 5 33 -0.992889 36302 1 40 19 0.177679 36303 1 10 34 0.990936 36685 1 39 34 0.595904 36686 1 44 21 -0.212958 36687 1 38 27 -0.224555 37070 1 40 32 0.0938139 37071 1 25 44 1.34519 37072 1 15 26 0.823695 37735 1 14 37 -0.373608 37736 1 34 20 -1.62609 38041 1 0 39 -0.558428 38042 1 25 43 0.402417 38269 1 3 34 0.658162 39034 1 0 43 -0.989471 39035 1 40 34 0.30488 39036 1 6 27 -1.60228 39292 1 15 21 -0.949309 39293 1 4 44 1.58824 39294 1 4 34 -1.28513 39295 1 21 44 0.554033 39733 1 10 38 -1.22837 39734 1 0 26 1.60375 40078 1 4 21 -0.652425 40079 1 19 44 -1.21921 40080 1 10 21 0.0380261 40343 1 25 26 -1.72936 40344 1 44 36 -0.885342 40737 1 11 39 0.350536 40738 1 5 32 0.800989 40980 1 21 33 -0.610187 40981 1 1 36 -0.4626 41729 1 43 26 0.124577 41730 1 16 38 -0.161443 41731 1 44 33 -1.73864 42012 1 30 27 -1.24058 42013 1 17 21 1.52733 42014 1 33 33 1.72655 42279 1 13 20 -1.5421 42280 1 32 32 -0.342601 42281 1 9 44 1.44835 42608 1 32 39 0.690756 42609 1 12 26 -1.31162 42610 1 40 33 -1.61534 43186 1 33 26 -1.49046 43187 1 15 40 0.975555 43188 1 25 34 0.671468 43540 1 38 33 0.432203 43541 1 10 44 1.13852 43542 1 21 27 -0.141545 43543 1 1 32 -0.563433 43863 1 2 38 0.237861 43864 1 10 25 1.34886 43865 1 16 44 0.377026 43866 1 17 40 -0.811853 44253 1 17 38 0.370678 44254 1 13 35 0.340892 44255 1 30 26 0.515091 44523 1 12 40 1.19529 44985 1 12 44 0.309519 44986 1 11 30 -0.929777 44987 1 36 38 -1.90588 45274 1 10 40 1.56761 45486 1 15 38 1.5548 45487 1 35 39 0.553423 45874 1 1 38 -0.0921049 45875 1 43 39 1.46886 46198 1 8 39 -1.29612 46199 1 34 40 1.22507 46200 1 15 39 -1.53478 46534 1 17 25 -1.6068 46746 1 8 40 1.77392 46747 1 13 37 -0.929899 47095 1 10 33 1.3524 47096 1 37 27 0.888882 47097 1 20 20 1.54991 47439 1 3 44 1.87317 47440 1 40 26 0.565508 47646 1 34 38 -0.542314 47647 1 38 40 -0.434156 47918 1 33 37 -1.38585 48618 1 43 36 0.96115 48619 1 1 26 1.13926 48810 1 19 37 -0.920011 49125 1 44 43 0.622883 49126 1 2 26 -0.615314 49127 1 13 36 1.9458 49501 1 39 35 0.101871 49502 1 9 30 -1.34373 49503 1 25 25 0.167302 49743 1 33 27 0.582476 50111 1 27 34 0.567095 50439 1 3 39 -0.80929 50618 1 20 32 -0.855556 50619 1 34 35 0.323435 50910 1";
        Genome foe; foe.loadFromString(bestADN);

        best = new Network(&foe);
        Network* bestClone = new Network(&foe);
        bool dummy;

        fitnessEvaluation(nullptr, dummy);

        delete best;
        delete bestClone;
    #else
        #ifdef REBUILD
            pool.init();
        #else
            unsigned f = 0;
            std::cout << "Load generation: "; std::cin >> f;

            pool.loadFromFolder(f);
        #endif // REBUILD

        unsigned x = 0;
        std::cout << "Train to generation: "; std::cin >> x;

        std::string bestADN = "45 30 104 0 4 0 0 0 0 13 21 -1.46394 37 1 16 20 0.467131 38 0 18 19 -0.471796 39 1 11 20 -2.07471 1107 1 3 21 1.36019 1108 1 18 20 -0.152138 1109 1 7 21 -1.98412 1896 0 6 20 -1.55843 1897 1 19 19 0.898255 5969 0 4 20 0.705997 5970 1 2 21 0.403046 8208 1 7 20 -1.39913 8209 1 9 19 1.25274 9014 1 3 25 1.07813 9015 1 25 21 0.668369 9016 1 19 20 -0.642625 9760 1 9 25 -0.816218 9761 1 3 26 1.95886 9762 1 26 21 1.48746 9763 1 13 26 1.73066 10491 1 1 19 -0.440536 10492 0 21 21 0.519086 11232 0 2 19 1.75268 11233 1 14 26 -1.84221 11234 0 11 27 0.912596 11235 1 27 20 -1.74755 11236 1 12 25 1.2492 11922 1 1 25 1.94952 11923 1 7 25 1.24806 13372 1 1 20 2.05491 13373 0 18 21 -0.0596332 13374 1 1 30 1.13412 13375 1 30 19 -0.399531 13376 1 4 30 -1.8036 14132 0 5 21 1.81548 14133 1 10 20 -1.21833 14134 1 8 19 0.652256 14878 1 14 19 -1.07616 14879 1 6 25 1.50074 14880 1 16 32 0.964006 14881 1 32 20 0.319303 14882 1 2 30 -1.58622 15604 1 4 33 -0.215033 15605 1 33 30 -1.49843 15606 1 27 19 -0.570618 16354 1 33 19 0.943961 16355 1 7 30 -0.396415 17937 1 2 20 -1.30839 17938 1 18 27 -0.626667 17939 1 21 34 0.540094 17940 1 34 21 0.381566 17941 1 26 26 1.91962 18707 1 26 32 0.93318 18708 1 14 27 0.427686 19491 1 19 27 1.4438 19492 1 17 34 -0.59337 19493 1 34 34 -0.650227 20226 1 15 27 -0.808713 20227 1 3 27 -0.520346 20228 1 18 34 1.2711 20229 1 19 35 1.0473 20230 1 35 19 0.95751 20231 1 9 34 -0.226139 20959 1 18 32 -0.30805 20960 1 8 27 -0.181219 20961 1 34 36 0.934629 20962 1 36 21 0.552196 20963 1 12 35 -0.551714 21777 1 18 25 1.55834 21778 0 7 37 0.972892 21779 1 37 21 -1.98286 21780 1 14 30 -0.46736 23405 1 0 25 0.147526 23406 1 32 19 -0.247488 23407 1 18 37 0.107974 23408 1 18 38 1.02602 23409 1 38 25 1.16379 23410 1 19 34 0.809656 25686 1 8 35 0.364452 25687 1 20 37 -0.714539 25688 1 2 39 1 25689 1 39 20 -1.38499 25690 1 12 20 1.76702 27291 1 26 36 1.81473 27292 1 35 37 1.01092 27293 0 36 20 -1.08786 28136 1 37 30 -1.66503 28137 0 8 20 -0.084048 28138 1 35 40 1 28139 1 40 37 1.01092 28140 1 13 33 -1.01291 29035 1 15 36 1.77966 29036 1 11 37 -0.57796 29814 1 0 33 -0.794885 29815 1 39 40 0.364086 29816 1 11 38 -1.33396 29817 1 1 43 1 29818 1 43 30 1.03879 29819 1 19 25 -1.63549 30650 1 32 30 -0.896817 30651 1 25 39 1.94494 30652 1 18 43 1.83422 30653 1 37 44 1 30654 1 44 30 -1.66503 30655 1";
        Genome foe; foe.loadFromString(bestADN);
        best = new Network(&foe);

        while (pool.generation < x)
        {
//            best = new Network(pool.getRandomGenome());

            if (!pool.computeGenerationFitness(fitnessEvaluation))
                break;

            pool.buildNewGeneration(true);

//            delete best;
        }

        delete best;
    #endif

    return 0;
}

float fitnessEvaluation(Network* net, bool& stop)
{
    Snorkunking game(net, best);

    #ifdef DEBUG
        sf::RenderWindow* ecran = Input::getWindow();

        while (Input::isOpen())
        {
            /// Update events
                Input::update();

            /// Update game
                if (!game.update())
                {
                    std::cout << "Score player 1: " << game.getPlayer(0)->score << std::endl;
                    std::cout << "Score player 2: " << game.getPlayer(1)->score << std::endl;

                    return 0.0f;
                }

            /// Draw
                ecran->clear(sf::Color(0, 204, 255));

                game.draw();

                ecran->display();
        }
    #else
        while (game.update()) {}

        return game.getPlayer(0)->score - game.getPlayer(1)->score;
    #endif // DEBUG

    stop = true;
    return 0.0f;
}
